import React, { createContext, useContext, useState, useEffect, useRef } from 'react';
import { subscriptionService, SubscriptionType, SubscriptionStatus } from '@/utils/subscriptionService';
import { useAuth } from '@/contexts/AuthContext';
import { usePathname } from 'expo-router';

interface SubscriptionContextType {
  isSubscribed: boolean;
  subscriptionType: SubscriptionType;
  subscriptionStatus: SubscriptionStatus;
  showSubscriptionModal: boolean;
  showSurveyModal: boolean;
  subscribe: (type: SubscriptionType) => Promise<boolean>;
  startTrial: () => Promise<boolean>;
  setShowSubscriptionModal: (show: boolean) => void;
  setShowSurveyModal: (show: boolean) => void;
  checkSubscription: () => Promise<void>;
}

const SubscriptionContext = createContext<SubscriptionContextType | undefined>(undefined);

export const useSubscription = () => {
  const context = useContext(SubscriptionContext);
  if (!context) {
    throw new Error('useSubscription must be used within a SubscriptionProvider');
  }
  return context;
};

export const SubscriptionProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user } = useAuth();
  const pathname = usePathname();
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [subscriptionType, setSubscriptionType] = useState<SubscriptionType>('free');
  const [subscriptionStatus, setSubscriptionStatus] = useState<SubscriptionStatus>('inactive');
  const [showSubscriptionModal, setShowSubscriptionModal] = useState(false);
  const [showSurveyModal, setShowSurveyModal] = useState(false);
  const [hasShownModalThisSession, setHasShownModalThisSession] = useState(false);
  const [previousIsSubscribed, setPreviousIsSubscribed] = useState(false); // Track previous subscription state
  const modalTimeoutRef = useRef<number | null>(null);

  // Check if we're currently on an auth page
  const isOnAuthPage = pathname?.includes('/login') || pathname?.includes('/register') || pathname?.includes('/(auth)');

  const checkSubscription = async () => {
    if (!user) {
      setIsSubscribed(false);
      setSubscriptionType('free');
      setSubscriptionStatus('inactive');
      setShowSubscriptionModal(false); // Reset modal state when no user
      setPreviousIsSubscribed(false);
      return;
    }

    const details = await subscriptionService.getSubscriptionDetails(user.id);
    if (details) {
      const isActive = await subscriptionService.checkSubscriptionStatus(user.id);
      
      // Check if subscription just became inactive (expired)
      if (previousIsSubscribed && !isActive && subscriptionStatus !== 'inactive') {
        console.log('Subscription expired, deleting auto-generated workouts...');
        try {
          const deletionSuccess = await subscriptionService.deleteAutoGeneratedWorkouts(user.id);
          if (deletionSuccess) {
            console.log('Auto-generated workouts deleted due to subscription expiration');
          } else {
            console.warn('Failed to delete some auto-generated workouts after subscription expiration');
          }
        } catch (error) {
          console.error('Error deleting auto-generated workouts after expiration:', error);
        }
      }
      
      // Update states
      setPreviousIsSubscribed(isActive);
      setIsSubscribed(isActive);
      setSubscriptionType(details.type);
      setSubscriptionStatus(details.status);

      // Show subscription modal if subscription is inactive or expired
      // Only show once per session and not if already shown
      if (!isActive && !showSubscriptionModal && !hasShownModalThisSession) {
        // Clear any existing timeout
        if (modalTimeoutRef.current) {
          clearTimeout(modalTimeoutRef.current);
        }
        
        // Add a 2-second delay before showing the subscription modal
        modalTimeoutRef.current = setTimeout(() => {
          // Double-check we're still not on auth pages before showing
          const currentIsOnAuthPage = pathname?.includes('/login') || pathname?.includes('/register') || pathname?.includes('/(auth)');
          
          if (!currentIsOnAuthPage) {
            setShowSubscriptionModal(true);
            setHasShownModalThisSession(true); // Mark as shown for this session
          }
          modalTimeoutRef.current = null;
        }, 2000);
      }
    }
  };

  // Reset modal states when on auth pages
  useEffect(() => {
    if (isOnAuthPage) {
      // Clear any pending timeout when navigating to auth pages
      if (modalTimeoutRef.current) {
        clearTimeout(modalTimeoutRef.current);
        modalTimeoutRef.current = null;
      }
      setShowSubscriptionModal(false);
      setShowSurveyModal(false);
    }
  }, [isOnAuthPage]);

  // Cleanup timeout on unmount
  useEffect(() => {
    return () => {
      if (modalTimeoutRef.current) {
        clearTimeout(modalTimeoutRef.current);
      }
    };
  }, []);

  useEffect(() => {
    // Only run subscription checks if user exists and we're not on auth pages
    if (user && !isOnAuthPage) {
      checkSubscription();
    }
  }, [user, pathname, isOnAuthPage]);

  const subscribe = async (type: SubscriptionType) => {
    if (!user) return false;
    
    const success = await subscriptionService.subscribe(user.id, type);
    if (success) {
      setShowSubscriptionModal(false);
      
      // Check if user has already completed the survey
      const hasCompletedSurvey = await subscriptionService.hasUserCompletedSurvey(user.id);
      
      if (!hasCompletedSurvey) {
        // Only show survey if user hasn't completed it
        setShowSurveyModal(true);
      } else {
        console.log('User has already completed survey, skipping survey modal');
      }
      
      // Reset session flag since user has subscribed
      setHasShownModalThisSession(false);
      await checkSubscription();
    }
    return success;
  };

  const startTrial = async () => {
    if (!user) return false;
    
    const success = await subscriptionService.startTrial(user.id);
    if (success) {
      setShowSubscriptionModal(false);
      
      // Check if user has already completed the survey
      const hasCompletedSurvey = await subscriptionService.hasUserCompletedSurvey(user.id);
      
      if (!hasCompletedSurvey) {
        // Only show survey if user hasn't completed it
        setShowSurveyModal(true);
      } else {
        console.log('User has already completed survey, skipping survey modal');
      }
      
      // Reset session flag since user has started trial
      setHasShownModalThisSession(false);
      await checkSubscription();
    }
    return success;
  };

  const value = {
    isSubscribed,
    subscriptionType,
    subscriptionStatus,
    showSubscriptionModal: isOnAuthPage ? false : showSubscriptionModal, // Force false on auth pages
    showSurveyModal: isOnAuthPage ? false : showSurveyModal, // Force false on auth pages
    subscribe,
    startTrial,
    setShowSubscriptionModal: (show: boolean) => {
      // Don't allow setting to true on auth pages
      if (!isOnAuthPage || !show) {
        setShowSubscriptionModal(show);
        // If manually closing the modal, mark as shown for this session
        if (!show) {
          setHasShownModalThisSession(true);
        }
      }
    },
    setShowSurveyModal: (show: boolean) => {
      // Don't allow setting to true on auth pages
      if (!isOnAuthPage || !show) {
        setShowSurveyModal(show);
      }
    },
    checkSubscription,
  };

  return (
    <SubscriptionContext.Provider value={value}>
      {children}
    </SubscriptionContext.Provider>
  );
}; 